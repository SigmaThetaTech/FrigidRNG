
{
	// Place your snippets for lua here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Preamble": {
		"prefix": "header",
		"body": [
			"--!strict",
			"-- Authors: ${1}",
			"-- $CURRENT_MONTH_NAME $CURRENT_DATE, $CURRENT_YEAR",
			"--[[",
			"\t${TM_FILENAME}",
			"",
			"\tDescription:",
			"\t\t${2}",
			"",
			"\t\t",
			"]]",
			"",
			"--Σ Services Σ--",
			"local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")",
			"",
			"--Σ Requires Σ--",
			"local Network = require(\"@Network\")",
			"",
			"--Σ Types Σ--",
			"",
			"--Σ Constants Σ--",
			"",
			"--Σ Volatiles Σ--",
			"",
			"${3}",
		],
		"description": "Inserts a boilerplate header for a gamplay file"
	},

	"Service": {
		"prefix": ["service"],
		"body": [
			"--------------------------------------------------------------------------------",
			"-- Service Declaration",
			"--------------------------------------------------------------------------------",
			"",
			"@server",
			"local ${0:$TM_FILENAME_BASE} = {}",
			"",
			"--------------------------------------------------------------------------------",
			"--MARK: Private Functions",
			"--------------------------------------------------------------------------------",
			"",
			"--------------------------------------------------------------------------------",
			"--MARK: Methods",
			"--------------------------------------------------------------------------------",
			"",
			"--------------------------------------------------------------------------------",
			"--MARK: Lifecycle Methods",
			"--------------------------------------------------------------------------------",
			"",
			"function ${0:$TM_FILENAME_BASE}:Start()",
			"\t",
			"end",
			"",
			"",
			"function ${0:$TM_FILENAME_BASE}:Init()",
			"\t",
			"end",
			"",
			"",
			"return ${0:$TM_FILENAME_BASE}",
			""
		],
		"description": "Inserts a template for a sever-side \"service\" ModuleScript with :Init() and :Start() lifecycle methods. Use after `header`."
	},

	"Controller": {
		"prefix": ["controller"],
		"body": [
			"--------------------------------------------------------------------------------",
			"-- Controller Declaration",
			"--------------------------------------------------------------------------------",
			"",
			"@client",
			"local ${0:$TM_FILENAME_BASE} = {}",
			"",
			"--------------------------------------------------------------------------------",
			"--MARK: Private Functions",
			"--------------------------------------------------------------------------------",
			"",
			"--------------------------------------------------------------------------------",
			"--MARK: Methods",
			"--------------------------------------------------------------------------------",
			"",
			"--------------------------------------------------------------------------------",
			"--MARK: Lifecycle Methods",
			"--------------------------------------------------------------------------------",
			"",
			"function ${0:$TM_FILENAME_BASE}:Start()",
			"\t",
			"end",
			"",
			"",
			"function ${0:$TM_FILENAME_BASE}:Init()",
			"\t",
			"end",
			"",
			"",
			"return ${0:$TM_FILENAME_BASE}",
			""
		],
		"description": "Inserts a template for a client-side \"controller\" ModuleScript with :Init() and :Start() lifecycle methods. Use after `header`."
	},

	"Method": {
		"prefix": "method",
		"body": [
			"--[=[",
			"\t@within ${TM_FILENAME_BASE}",
			"\t${2:A description of why this method exists, what it does, and how to use it.}",
			"\t",
			"\t@param ${3} -- ${4:Parameter description.}",
			"\t@return ${5} -- ${6:Return description. (Usually success/failure boolean)}",
			"]=]",
			"function ${TM_FILENAME_BASE}:${1:MethodName}(${3}): (${5})",
			"\t${0}",
			"end",
		],
		"description": "A boilerplate Object Method",
	},

	"Getter": {
		"prefix": "getter",
		"body": [
			"--[=[",
			"\tGets the value of _${1:ValueName} from a ${TM_FILENAME_BASE}.",
			"\t@return ${2} -- ${3:Description of the value stored in _${1:ValueName}.}",
			"]=]",
			"function ${TM_FILENAME_BASE}:Get${1:ValueName}(): (${2})",
			"\treturn self._${1:ValueName}",
			"end",
		],
		"description": "A generic boilerplate Getter method",
	},

	"Setter": {
		"prefix": "setter",
		"body": [
			"--[=[",
			"\tSets the value of _${1:ValueName} in a ${TM_FILENAME_BASE}.",
			"\t@param newValue: ${2} -- The new value to set _${1:ValueName} to.",
			"]=]",
			"function ${TM_FILENAME_BASE}:Set${1:ValueName}(newValue: ${2}): ()",
			"\tself._${1:ValueName} = newValue;",
			"end",
		],
		"description": "A generic boilerplate Setter method",
	},

	"Component": {
		"prefix": ["component"],
		"body": [
			"--!strict",
			"-- Authors: ${2}",
			"-- $CURRENT_MONTH_NAME $CURRENT_DATE, $CURRENT_YEAR",
			"--[[",
			"\t${TM_FILENAME}",
			"",
			"\tDescription:",
			"\t\t${2}",
			"",
			"\t[Props]",
			"\t\t",
			"]]",
			"",
			"--Σ Services Σ--",
			"local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")",
			"",
			"--Σ Requires Σ--",
			"local Network = require(\"@Network\")",
			"local Component = require(\"@Packages/Component\")",
			"local Janitor = require(\"@Packages/Janitor\")",
			"",
			"--Σ Types Σ--",
			"export type ${0:$TM_FILENAME_BASE} = {",
				"\tTag: \"${0:$TM_FILENAME_BASE}\",",
				"\t",
			"}",
			"",
			"--Σ Constants Σ--",
			"",
			"--Σ Volatiles Σ--",
			"",
			"--------------------------------------------------------------------------------",
			"--MARK: Component Declaration",
			"--------------------------------------------------------------------------------",
			"-- Component Setup --",
			"local ${0:$TM_FILENAME_BASE} = Component.new({",
				"\tTag = \"${0:$TM_FILENAME_BASE}\",",
				"\tAncestors = {workspace},",
				"\tExtensions = {}",
			"})",
			"",
			"--------------------------------------------------------------------------------",
			"--MARK: Private Functions",
			"--------------------------------------------------------------------------------",
			"",
			"--------------------------------------------------------------------------------",
			"--MARK: Component Lifecycle Methods",
			"--------------------------------------------------------------------------------",
			"",
			"--[[",
				"\tConstruct is called before the component is started, and should be used to ",
				"\tconstruct the component-instance's properties and events.",
			"]]",
			"function ${0:$TM_FILENAME_BASE}:Construct()",
				"\tself.Janitor = Janitor.new()",
			"end",
			"",
			"--[[",
				"\tStart is called when the component is started. At this point in time, it is safe to ",
				"\tgrab other components also bound to the same instance.",
			"]]",
			"function ${0:$TM_FILENAME_BASE}:Start()",
			"end",
			"",
			"--[[",
				"\tStop is called when the component is stopped. This occurs either when the bound instance ",
				"\tis removed from one of the whitelisted ancestors or when the matching tag is removed from ",
				"\tthe instance. This also means that the instance might be destroyed, and thus it is not safe ",
				"\tto continue using the bound instance (e.g. self.Instance) any longer.",
				"\t",
				"\tThis should be used to clean up the component.",
			"]]",
			"function ${0:$TM_FILENAME_BASE}:Stop()",
				"\tself.Janitor:Destroy()",
			"end",
			"",
			"--------------------------------------------------------------------------------",
			"--MARK: Getters",
			"--------------------------------------------------------------------------------",
			"",
			"--------------------------------------------------------------------------------",
			"--MARK: Setters",
			"--------------------------------------------------------------------------------",
			"",
			"--------------------------------------------------------------------------------",
			"--MARK: Methods",
			"--------------------------------------------------------------------------------",
			"",
			"--------------------------------------------------------------------------------",
			"--MARK: Network Listeners",
			"--------------------------------------------------------------------------------",
			"",
			"return ${0:$TM_FILENAME_BASE}",
			""
		],
		"description": "Inserts a template for an [RBXUtil component](https://sleitnick.github.io/RbxUtil/api/Component/) with lifecycle methods. Note that this refers to an ECS component and not a UI component. Use after `header`."
	},

	"Class": {
		"prefix": ["class"],
		"body": [
			"--!strict",
			"-- Authors: ${1}",
			"-- $CURRENT_MONTH_NAME $CURRENT_DATE, $CURRENT_YEAR",
			"--[[",
			"\t${TM_FILENAME}",
			"",
			"\tDescription:",
			"\t\t@class",
			"\t\t${2}",
			"\t",
			"]]",
			"",
			"--Σ Services Σ--",
			"local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")",
			"",
			"--Σ Requires Σ--",
			"local Network = require(\"@Network\")",
			"local Janitor = require(\"@Packages/Janitor\")",
			"",
			"--Σ Types Σ--",
			"",
			"--Σ Constants Σ--",
			"",
			"--Σ Volatiles Σ--",
			"",
			"--Σ Class Setup Σ--",
			"local ${0:$TM_FILENAME_BASE} = {}",
			"${0:$TM_FILENAME_BASE}.__index = ${0:$TM_FILENAME_BASE}",
			"",
			"export type ${0:$TM_FILENAME_BASE} = typeof(setmetatable({",
			"\tClassName = \"${0:$TM_FILENAME_BASE}\",",
			"\t_Janitor = Janitor.new()",
			"}, ${0:$TM_FILENAME_BASE}))",
			"",
			"--------------------------------------------------------------------------------",
			"--MARK: Private Functions",
			"--------------------------------------------------------------------------------",
			"",
			"--------------------------------------------------------------------------------",
			"--MARK: Class Constructor/Destructor",
			"--------------------------------------------------------------------------------",
			"",
			"--[=[",
				"\tThe constructor for a ${0:$TM_FILENAME_BASE} Object.",
				"\t@return ${0:$TM_FILENAME_BASE}",
			"]=]",
			"function ${0:$TM_FILENAME_BASE}.new(): ${0:$TM_FILENAME_BASE}",
				"\tlocal self = setmetatable({",
				"\t\tClassName = \"${0:$TM_FILENAME_BASE}\",",
				"\t\t_Janitor = Janitor.new()",
				"",
				"\t\t-- Properties:",
				"",
				"\t}, ${0:$TM_FILENAME_BASE})",
				"",
				"\t-- Setup:",
				"\t",
				"\tself:_Initialize()",
				"\treturn self",
			"end",
			"",
			"--[=[",
				"\tThe Destructor for a ${0:$TM_FILENAME_BASE} Object.",
			"]=]",
			"function ${0:$TM_FILENAME_BASE}:Destroy()",
				"\tself._Janitor:Destroy()",
			"end",
			"",
			"--------------------------------------------------------------------------------",
			"--MARK: Getters",
			"--------------------------------------------------------------------------------",
			"",
			"--------------------------------------------------------------------------------",
			"--MARK: Setters",
			"--------------------------------------------------------------------------------",
			"",
			"--------------------------------------------------------------------------------",
			"--MARK: Methods",
			"--------------------------------------------------------------------------------",
			"",
			"--------------------------------------------------------------------------------",
			"--MARK: Initialization",
			"--------------------------------------------------------------------------------",
			"",
			"--[[",
				"\tThe Initialization method is called once an ${0:$TM_FILENAME_BASE} Object",
				"\thas reached the end of its constructor.",
			"]]",
			"function ${0:$TM_FILENAME_BASE}:_Initialize()",
				"\tprint(\"'${0:$TM_FILENAME_BASE}' Object Initialized!\")",
			"end",
			"",
			"return ${0:$TM_FILENAME_BASE}",
			""
		],
		"description": "Lua Class"
	},

	"Fusion Component": {
		"prefix": ["fusioncomponent"],
		"body": [
			"--!strict",
			"-- Authors: ${1}",
			"-- $CURRENT_MONTH_NAME $CURRENT_DATE, $CURRENT_YEAR",
			"--[[",
			"\t${TM_FILENAME}",
			"",
			"\tDescription:",
			"\t\t${2}",
			"",
			"\t[Props]",
			"\t\t",
			"]]",
			"",
			"--Σ Services Σ--",
			"local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")",
			"",
			"--Σ Requires Σ--",
			"local Network = require(\"@Network\")",
			"local Fusion = require(\"@Packages/Fusion\")",
			"",
			"--Σ Types Σ--",
			"export type ${1:ComponentName}Props = {",
			"\tChildren: {};",
			"}",
			"",
			"--Σ Constants Σ--",
			"",
			"--Σ Volatiles Σ--",
			"local New = Fusion.New",
			"local Value = Fusion.Value",
			"local Computed = Fusion.Computed",
			"local Children = Fusion.Children",
			"",
			"--------------------------------------------------------------------------------",
			"--MARK: Main Component",
			"--------------------------------------------------------------------------------",
			"",
			"return function(props: ${1:ComponentName}Props): Instance",
			"\t",
			"\tlocal ${1:ComponentName}: Instance = New \"${2:Frame}\" {",
			"\t\tName = \"${1:ComponentName}\";",
			"\t\t",
			"\t\t[Children] = {",
			"\t\t\tprops.Children;",
			"\t\t};",
			"\t}",
			"\t",
			"\treturn ${1:ComponentName};",
			"end",
		],
		"description": "Inserts a template for a functional Fusion component with typed props."
	},

	"Section Header": {
		"prefix": ["sectionheader"],
		"body": [
			"--------------------------------------------------------------------------------",
			"--MARK: ${0:SectionName}",
			"--------------------------------------------------------------------------------",
		],
		"description": "An organizational header for a code section."
	},
}

